#include <curses.h>
#include <locale.h>
#include <string>
#include <vector>
#include "ncurses-menu.cpp"
#include "EstructuraPrincipal.cpp"
#include "AlgoritmoBFS.cpp"
#include "AlgoritmoDijkstra.cpp"
#include "AlgoritmoAEstrella.cpp"

/* Imprime un tipico men√∫ de juegos */
int main (int argc, char *argv[])
{
    int menu_ret = 1;
    std::vector<std::string> alts = { 
					 "Algoritmo BFS",        /* Every menu needs an */
					 "Algoritmo Dijkstra",  /* array like these to */
					 "Algoritmo A*",		  /* hold the entries.   */
					 "Salir",};   

    setlocale (LC_CTYPE, "");
	
    initscr();                  /* Most of the below initialisers are */
    noecho();                   /* not necessary for this example.    */
    keypad (stdscr, TRUE);      /* It's just a template for a         */
    meta (stdscr, TRUE);        /* hypothetical program that might    */
    nodelay (stdscr, FALSE);    /* need them.                         */
    notimeout (stdscr, TRUE);
    start_color();
    raw();
    curs_set (0);

    do  /* This loop terminates when MAIN MENU returns 3, Quit Game.   */
    {   /* menu_ret is sent as the start value, to make the last entry */
        /* highlighted when you return to the main menu.               */
        
        menu_ret = print_menu (4, 7, (int)alts.size(), 30,
                               "Algoritmos de Busqueda", alts, menu_ret);

        if (menu_ret == 1)
        {
			std::vector<std::string> mapa = {
"------------------------------------------------------------",
"------------------------------------------------------------",
"------------------------------------------------------------",
"------------------------------------------------------------",
"------------------------------------------------------------",
"------------------------------------------------------------",
"------------------------------------------------------------",
"------------------------------------------------------------",
"------------------------------------------------------------",
"------------------------------------------------------------",
"------------------------------------------------------------",
"------------------------------------------------------------",
"------------------------------------------------------------",
"------------------------------------------------------------",
"------------------------------------------------------------",




				};
            AlgoritmoBFS bfs(22,3,27,5,0,0,'#',mapa,20000);
            
            bfs.iniciar_busqueda();
            
            getch();
        }

        else if (menu_ret == 2) 
        {                       
            std::vector<std::string> mapa = {
"1111111#1111111111111111111111111111111111111111111111111111",
"1111111#1111111111111111111111111111111111111111111111111111",
"1111111#1111111111111111111111111111111111111111111111111111",
"1111111#1111111111111111111111111111111111111111111111111111",
"1111111#1111111111111111111111111111111111111111111111111111",
"1111111#1111111111111111111111111111111111111111111111111111",
"111111111111111111111111111111111111111111111111111111111111",
"111111111111111111111111111111111111111111111111111111111111",
"111111111111111111111111111111111111111111111111111111111111",
"111111111111111111111111111111111111111111111111111111111111",
"111111111111111111111111111111111111111111111111111111111111",
"111111111111111111111111111111111111111111111111111111111111",
"111111111111111111111111111111111111111111111111111111111111",
"111111111111111111111111111111111111111111111111111111111111",
"111111111111111111111111111111111111111111111111111111111111",





			};
			AlgoritmoDijkstra Dijk(18,2,27,5,0,0,'#',mapa,20000);
            
            Dijk.iniciar_busqueda();
            getch();
        }
        else if (menu_ret == 3) 
        {                       
            std::vector<std::string> mapa = {
"1111111#1111111111111111111111111111111111111111111111111111",
"1111111#1111111111111111111111111111111111111111111111111111",
"1111111#1111111111111111111111111111111111111111111111111111",
"1111111#1111111111111111111111111111111111111111111111111111",
"1111111#1111111111111111111111111111111111111111111111111111",
"1111111#1111111111111111111111111111111111111111111111111111",
"111111111111111111111111111111111111111111111111111111111111",
"111111111111111111111111111111111111111111111111111111111111",
"111111111111111111111111111111111111111111111111111111111111",
"111111111111111111111111111111111111111111111111111111111111",
"111111111111111111111111111111111111111111111111111111111111",
"111111111111111111111111111111111111111111111111111111111111",
"111111111111111111111111111111111111111111111111111111111111",
"111111111111111111111111111111111111111111111111111111111111",
"111111111111111111111111111111111111111111111111111111111111",


			};
			AlgoritmoAEstrella AX(18,2,27,5,0,0,'#',mapa,20000);
            
            AX.iniciar_busqueda();
            getch();
        }

        erase();    /* When you return from the SELECT SLOT menu,      */
    }               /* everything will be erased and MAIN MENU will be */
    while (menu_ret != 4); /* reprinted.                               */

    endwin();
    return 0;
}
